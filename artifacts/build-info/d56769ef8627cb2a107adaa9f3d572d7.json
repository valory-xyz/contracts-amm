{
  "id": "d56769ef8627cb2a107adaa9f3d572d7",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.7.1",
  "solcLongVersion": "0.7.1+commit.f4a555be",
  "input": {
    "language": "Solidity",
    "sources": {
      "third_party/safe-contracts/contracts/handler/HandlerContext.sol": {
        "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title Handler Context - allows to extract calling context\n/// @author Richard Meissner - <richard@gnosis.pm>\n/// @notice based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol\ncontract HandlerContext {\n    // This function does not rely on a trusted forwarder. Use the returned value only to check information against the calling manager.\n    /// @notice This is only reliable in combination with a FallbackManager that supports this (e.g. Safe contract >=1.3.0).\n    ///         When using this functionality make sure that the linked _manager (aka msg.sender) supports this.\n    function _msgSender() internal pure returns (address sender) {\n        // The assembly code is more direct than the Solidity version using `abi.decode`.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    // Function do differentiate more clearly between msg.sender and the calling manager\n    function _manager() internal view returns (address) {\n        return msg.sender;\n    }\n}\n"
      },
      "third_party/safe-contracts/contracts/test/TestHandler.sol": {
        "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"../handler/HandlerContext.sol\";\n\ncontract TestHandler is HandlerContext {\n    function dudududu() external view returns (address sender, address manager) {\n        return (_msgSender(), _manager());\n    }\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 1000
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "contracts": {
      "third_party/safe-contracts/contracts/handler/HandlerContext.sol": {
        "HandlerContext": {
          "abi": [],
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212202b5750727722ba82bfacdf3d5f8de967acc4df8a8a15ebc1ecfde34f21aa26ba64736f6c63430007010033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B JUMPI POP PUSH19 0x7722BA82BFACDF3D5F8DE967ACC4DF8A8A15EB 0xC1 0xEC REVERT 0xE3 0x4F 0x21 0xAA 0x26 0xBA PUSH5 0x736F6C6343 STOP SMOD ADD STOP CALLER ",
              "sourceMap": "347:900:0:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea26469706673582212202b5750727722ba82bfacdf3d5f8de967acc4df8a8a15ebc1ecfde34f21aa26ba64736f6c63430007010033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B JUMPI POP PUSH19 0x7722BA82BFACDF3D5F8DE967ACC4DF8A8A15EB 0xC1 0xEC REVERT 0xE3 0x4F 0x21 0xAA 0x26 0xBA PUSH5 0x736F6C6343 STOP SMOD ADD STOP CALLER ",
              "sourceMap": "347:900:0:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Richard Meissner - <richard@gnosis.pm>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Handler Context - allows to extract calling context\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"third_party/safe-contracts/contracts/handler/HandlerContext.sol\":\"HandlerContext\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"third_party/safe-contracts/contracts/handler/HandlerContext.sol\":{\"keccak256\":\"0x1e30ae950820820e4c5730533c23102e2edb869d6033f542471e8bf99729df08\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://8edf229566d71b90488fdd3e03dbdef5c37aa4ea59038ed1c12682bf27be9883\",\"dweb:/ipfs/QmY25p3Zv9KF3bs32NDoJ2NgFhZpoXubzAirjXzMVk4B6L\"]}},\"version\":1}"
        }
      },
      "third_party/safe-contracts/contracts/test/TestHandler.sol": {
        "TestHandler": {
          "abi": [
            {
              "inputs": [],
              "name": "dudududu",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "manager",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b5060d98061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806354955e5914602d575b600080fd5b6033607c565b604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b60008060856093565b608b609f565b915091509091565b60131936013560601c90565b339056fea264697066735822122087c0fc70a38303d4572f198d53f0bd05ad1cd27639fa6debb5d952346a8b570a64736f6c63430007010033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xD9 DUP1 PUSH2 0x1F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x54955E59 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x85 PUSH1 0x93 JUMP JUMPDEST PUSH1 0x8B PUSH1 0x9F JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x13 NOT CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 0xC0 0xFC PUSH17 0xA38303D4572F198D53F0BD05AD1CD27639 STATICCALL PUSH14 0xEBB5D952346A8B570A64736F6C63 NUMBER STOP SMOD ADD STOP CALLER ",
              "sourceMap": "116:173:1:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052348015600f57600080fd5b506004361060285760003560e01c806354955e5914602d575b600080fd5b6033607c565b604051808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b60008060856093565b608b609f565b915091509091565b60131936013560601c90565b339056fea264697066735822122087c0fc70a38303d4572f198d53f0bd05ad1cd27639fa6debb5d952346a8b570a64736f6c63430007010033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x54955E59 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x7C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x85 PUSH1 0x93 JUMP JUMPDEST PUSH1 0x8B PUSH1 0x9F JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x13 NOT CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 0xC0 0xFC PUSH17 0xA38303D4572F198D53F0BD05AD1CD27639 STATICCALL PUSH14 0xEBB5D952346A8B570A64736F6C63 NUMBER STOP SMOD ADD STOP CALLER ",
              "sourceMap": "116:173:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;161:126;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;204:14;220:15;255:12;:10;:12::i;:::-;269:10;:8;:10::i;:::-;247:33;;;;161:126;;:::o;752:312:0:-;-1:-1:-1;;1027:14:0;1023:23;1010:37;1006:2;1002:46;;978:80::o;1159:86::-;1228:10;1159:86;:::o"
            },
            "methodIdentifiers": {
              "dudududu()": "54955e59"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"dudududu\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"third_party/safe-contracts/contracts/test/TestHandler.sol\":\"TestHandler\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"third_party/safe-contracts/contracts/handler/HandlerContext.sol\":{\"keccak256\":\"0x1e30ae950820820e4c5730533c23102e2edb869d6033f542471e8bf99729df08\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://8edf229566d71b90488fdd3e03dbdef5c37aa4ea59038ed1c12682bf27be9883\",\"dweb:/ipfs/QmY25p3Zv9KF3bs32NDoJ2NgFhZpoXubzAirjXzMVk4B6L\"]},\"third_party/safe-contracts/contracts/test/TestHandler.sol\":{\"keccak256\":\"0xd0d1ab1222aabf7e5b961d780c6dbe0a2787c5eaa5fe424b7aa4da9c3d077767\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://581e8a206bc9c38353ded97aeaf70e439f5e0a088034da2c8705d9d574e721a4\",\"dweb:/ipfs/QmdEvZmpGnZ1sefGr2V1FajAMAxUGAeyqasaTYySTw3bQW\"]}},\"version\":1}"
        }
      }
    },
    "sources": {
      "third_party/safe-contracts/contracts/handler/HandlerContext.sol": {
        "ast": {
          "absolutePath": "third_party/safe-contracts/contracts/handler/HandlerContext.sol",
          "exportedSymbols": {
            "HandlerContext": [
              20
            ]
          },
          "id": 21,
          "license": "LGPL-3.0-only",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                ">=",
                "0.7",
                ".0",
                "<",
                "0.9",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "42:31:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 2,
                "nodeType": "StructuredDocumentation",
                "src": "75:272:0",
                "text": "@title Handler Context - allows to extract calling context\n @author Richard Meissner - <richard@gnosis.pm>\n @notice based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol"
              },
              "fullyImplemented": true,
              "id": 20,
              "linearizedBaseContracts": [
                20
              ],
              "name": "HandlerContext",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 9,
                    "nodeType": "Block",
                    "src": "813:251:0",
                    "statements": [
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "978:80:0",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "992:56:0",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1006:2:0",
                                    "type": "",
                                    "value": "96"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [],
                                            "functionName": {
                                              "name": "calldatasize",
                                              "nodeType": "YulIdentifier",
                                              "src": "1027:12:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1027:14:0"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1043:2:0",
                                            "type": "",
                                            "value": "20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "1023:3:0"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1023:23:0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "calldataload",
                                      "nodeType": "YulIdentifier",
                                      "src": "1010:12:0"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1010:37:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "shr",
                                  "nodeType": "YulIdentifier",
                                  "src": "1002:3:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1002:46:0"
                              },
                              "variableNames": [
                                {
                                  "name": "sender",
                                  "nodeType": "YulIdentifier",
                                  "src": "992:6:0"
                                }
                              ]
                            }
                          ]
                        },
                        "evmVersion": "istanbul",
                        "externalReferences": [
                          {
                            "declaration": 6,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "992:6:0",
                            "valueSize": 1
                          }
                        ],
                        "id": 8,
                        "nodeType": "InlineAssembly",
                        "src": "969:89:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3,
                    "nodeType": "StructuredDocumentation",
                    "src": "514:233:0",
                    "text": "@notice This is only reliable in combination with a FallbackManager that supports this (e.g. Safe contract >=1.3.0).\n         When using this functionality make sure that the linked _manager (aka msg.sender) supports this."
                  },
                  "id": 10,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgSender",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "771:2:0"
                  },
                  "returnParameters": {
                    "id": 7,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 6,
                        "mutability": "mutable",
                        "name": "sender",
                        "nodeType": "VariableDeclaration",
                        "scope": 10,
                        "src": "797:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 5,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "797:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "796:16:0"
                  },
                  "scope": 20,
                  "src": "752:312:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 18,
                    "nodeType": "Block",
                    "src": "1211:34:0",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 15,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1228:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 16,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1228:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "functionReturnParameters": 14,
                        "id": 17,
                        "nodeType": "Return",
                        "src": "1221:17:0"
                      }
                    ]
                  },
                  "id": 19,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_manager",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 11,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1176:2:0"
                  },
                  "returnParameters": {
                    "id": 14,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 13,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 19,
                        "src": "1202:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 12,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1202:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1201:9:0"
                  },
                  "scope": 20,
                  "src": "1159:86:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 21,
              "src": "347:900:0"
            }
          ],
          "src": "42:1206:0"
        },
        "id": 0
      },
      "third_party/safe-contracts/contracts/test/TestHandler.sol": {
        "ast": {
          "absolutePath": "third_party/safe-contracts/contracts/test/TestHandler.sol",
          "exportedSymbols": {
            "TestHandler": [
              40
            ]
          },
          "id": 41,
          "license": "LGPL-3.0-only",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 22,
              "literals": [
                "solidity",
                ">=",
                "0.7",
                ".0",
                "<",
                "0.9",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "42:31:1"
            },
            {
              "absolutePath": "third_party/safe-contracts/contracts/handler/HandlerContext.sol",
              "file": "../handler/HandlerContext.sol",
              "id": 23,
              "nodeType": "ImportDirective",
              "scope": 41,
              "sourceUnit": 21,
              "src": "75:39:1",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 24,
                    "name": "HandlerContext",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 20,
                    "src": "140:14:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_HandlerContext_$20",
                      "typeString": "contract HandlerContext"
                    }
                  },
                  "id": 25,
                  "nodeType": "InheritanceSpecifier",
                  "src": "140:14:1"
                }
              ],
              "contractDependencies": [
                20
              ],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 40,
              "linearizedBaseContracts": [
                40,
                20
              ],
              "name": "TestHandler",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 38,
                    "nodeType": "Block",
                    "src": "237:50:1",
                    "statements": [
                      {
                        "expression": {
                          "components": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 32,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 10,
                                "src": "255:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$__$returns$_t_address_$",
                                  "typeString": "function () pure returns (address)"
                                }
                              },
                              "id": 33,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "255:12:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 34,
                                "name": "_manager",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 19,
                                "src": "269:8:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 35,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "269:10:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "id": 36,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "254:26:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_address_$_t_address_$",
                            "typeString": "tuple(address,address)"
                          }
                        },
                        "functionReturnParameters": 31,
                        "id": 37,
                        "nodeType": "Return",
                        "src": "247:33:1"
                      }
                    ]
                  },
                  "functionSelector": "54955e59",
                  "id": 39,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "dudududu",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 26,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "178:2:1"
                  },
                  "returnParameters": {
                    "id": 31,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 28,
                        "mutability": "mutable",
                        "name": "sender",
                        "nodeType": "VariableDeclaration",
                        "scope": 39,
                        "src": "204:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 27,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "204:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 30,
                        "mutability": "mutable",
                        "name": "manager",
                        "nodeType": "VariableDeclaration",
                        "scope": 39,
                        "src": "220:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 29,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "220:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "203:33:1"
                  },
                  "scope": 40,
                  "src": "161:126:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 41,
              "src": "116:173:1"
            }
          ],
          "src": "42:248:1"
        },
        "id": 1
      }
    }
  }
}
