{
  "id": "c4da8e61bb24e70e50f6c5ba69349902",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.8.0",
  "solcLongVersion": "0.8.0+commit.c7dfd78e",
  "input": {
    "language": "Solidity",
    "sources": {
      "third_party/safe-contracts/contracts/handler/HandlerContext.sol": {
        "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title Handler Context - allows to extract calling context\n/// @author Richard Meissner - <richard@gnosis.pm>\n/// @notice based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol\ncontract HandlerContext {\n    // This function does not rely on a trusted forwarder. Use the returned value only to check information against the calling manager.\n    /// @notice This is only reliable in combination with a FallbackManager that supports this (e.g. Safe contract >=1.3.0).\n    ///         When using this functionality make sure that the linked _manager (aka msg.sender) supports this.\n    function _msgSender() internal pure returns (address sender) {\n        // The assembly code is more direct than the Solidity version using `abi.decode`.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    // Function do differentiate more clearly between msg.sender and the calling manager\n    function _manager() internal view returns (address) {\n        return msg.sender;\n    }\n}\n"
      },
      "third_party/safe-contracts/contracts/test/TestHandler.sol": {
        "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"../handler/HandlerContext.sol\";\n\ncontract TestHandler is HandlerContext {\n    function dudududu() external view returns (address sender, address manager) {\n        return (_msgSender(), _manager());\n    }\n}\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 1000
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "contracts": {
      "third_party/safe-contracts/contracts/handler/HandlerContext.sol": {
        "HandlerContext": {
          "abi": [],
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212209949c6844ebad3da45f8060f9ffb3408ea310633b59cc356cd62292011d9063964736f6c63430008000033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 0x49 0xC6 DUP5 0x4E 0xBA 0xD3 0xDA GASLIMIT 0xF8 MOD 0xF SWAP16 0xFB CALLVALUE ADDMOD 0xEA BALANCE MOD CALLER 0xB5 SWAP13 0xC3 JUMP 0xCD PUSH3 0x292011 0xD9 MOD CODECOPY PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
              "sourceMap": "347:900:0:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052600080fdfea26469706673582212209949c6844ebad3da45f8060f9ffb3408ea310633b59cc356cd62292011d9063964736f6c63430008000033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP10 0x49 0xC6 DUP5 0x4E 0xBA 0xD3 0xDA GASLIMIT 0xF8 MOD 0xF SWAP16 0xFB CALLVALUE ADDMOD 0xEA BALANCE MOD CALLER 0xB5 SWAP13 0xC3 JUMP 0xCD PUSH3 0x292011 0xD9 MOD CODECOPY PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
              "sourceMap": "347:900:0:-:0;;;;;"
            },
            "methodIdentifiers": {}
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Richard Meissner - <richard@gnosis.pm>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Handler Context - allows to extract calling context\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"third_party/safe-contracts/contracts/handler/HandlerContext.sol\":\"HandlerContext\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"third_party/safe-contracts/contracts/handler/HandlerContext.sol\":{\"keccak256\":\"0x1e30ae950820820e4c5730533c23102e2edb869d6033f542471e8bf99729df08\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://8edf229566d71b90488fdd3e03dbdef5c37aa4ea59038ed1c12682bf27be9883\",\"dweb:/ipfs/QmY25p3Zv9KF3bs32NDoJ2NgFhZpoXubzAirjXzMVk4B6L\"]}},\"version\":1}"
        }
      },
      "third_party/safe-contracts/contracts/test/TestHandler.sol": {
        "TestHandler": {
          "abi": [
            {
              "inputs": [],
              "name": "dudududu",
              "outputs": [
                {
                  "internalType": "address",
                  "name": "sender",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "manager",
                  "type": "address"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "6080604052348015600f57600080fd5b5060cc8061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806354955e5914602d575b600080fd5b60336048565b604051603f929190606f565b60405180910390f35b6000806051605f565b6057606b565b915091509091565b60131936013560601c90565b3390565b73ffffffffffffffffffffffffffffffffffffffff9283168152911660208201526040019056fea264697066735822122022d360269f64a48cac8c94923055df3dcebd6efd4819bbea5dda123042c8d60564736f6c63430008000033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xCC DUP1 PUSH2 0x1E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x54955E59 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x48 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3F SWAP3 SWAP2 SWAP1 PUSH1 0x6F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x51 PUSH1 0x5F JUMP JUMPDEST PUSH1 0x57 PUSH1 0x6B JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x13 NOT CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 0xD3 PUSH1 0x26 SWAP16 PUSH5 0xA48CAC8C94 SWAP3 ADDRESS SSTORE 0xDF RETURNDATASIZE 0xCE 0xBD PUSH15 0xFD4819BBEA5DDA123042C8D6056473 PUSH16 0x6C634300080000330000000000000000 ",
              "sourceMap": "116:173:1:-:0;;;;;;;;;;;;;;;;;;;"
            },
            "deployedBytecode": {
              "generatedSources": [
                {
                  "ast": {
                    "nodeType": "YulBlock",
                    "src": "0:343:2",
                    "statements": [
                      {
                        "nodeType": "YulBlock",
                        "src": "6:3:2",
                        "statements": []
                      },
                      {
                        "body": {
                          "nodeType": "YulBlock",
                          "src": "143:198:2",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "153:26:2",
                              "value": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "165:9:2"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "176:2:2",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "161:3:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "161:18:2"
                              },
                              "variableNames": [
                                {
                                  "name": "tail",
                                  "nodeType": "YulIdentifier",
                                  "src": "153:4:2"
                                }
                              ]
                            },
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "188:52:2",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "198:42:2",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              },
                              "variables": [
                                {
                                  "name": "_1",
                                  "nodeType": "YulTypedName",
                                  "src": "192:2:2",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "256:9:2"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "271:6:2"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "279:2:2"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "267:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "267:15:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "249:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "249:34:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "249:34:2"
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "303:9:2"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "314:2:2",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "299:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "299:18:2"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value1",
                                        "nodeType": "YulIdentifier",
                                        "src": "323:6:2"
                                      },
                                      {
                                        "name": "_1",
                                        "nodeType": "YulIdentifier",
                                        "src": "331:2:2"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "319:3:2"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "319:15:2"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "292:6:2"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "292:43:2"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "292:43:2"
                            }
                          ]
                        },
                        "name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
                        "nodeType": "YulFunctionDefinition",
                        "parameters": [
                          {
                            "name": "headStart",
                            "nodeType": "YulTypedName",
                            "src": "104:9:2",
                            "type": ""
                          },
                          {
                            "name": "value1",
                            "nodeType": "YulTypedName",
                            "src": "115:6:2",
                            "type": ""
                          },
                          {
                            "name": "value0",
                            "nodeType": "YulTypedName",
                            "src": "123:6:2",
                            "type": ""
                          }
                        ],
                        "returnVariables": [
                          {
                            "name": "tail",
                            "nodeType": "YulTypedName",
                            "src": "134:4:2",
                            "type": ""
                          }
                        ],
                        "src": "14:327:2"
                      }
                    ]
                  },
                  "contents": "{\n    { }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n}",
                  "id": 2,
                  "language": "Yul",
                  "name": "#utility.yul"
                }
              ],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "6080604052348015600f57600080fd5b506004361060285760003560e01c806354955e5914602d575b600080fd5b60336048565b604051603f929190606f565b60405180910390f35b6000806051605f565b6057606b565b915091509091565b60131936013560601c90565b3390565b73ffffffffffffffffffffffffffffffffffffffff9283168152911660208201526040019056fea264697066735822122022d360269f64a48cac8c94923055df3dcebd6efd4819bbea5dda123042c8d60564736f6c63430008000033",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x54955E59 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x48 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3F SWAP3 SWAP2 SWAP1 PUSH1 0x6F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x51 PUSH1 0x5F JUMP JUMPDEST PUSH1 0x57 PUSH1 0x6B JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x13 NOT CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR SWAP1 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x22 0xD3 PUSH1 0x26 SWAP16 PUSH5 0xA48CAC8C94 SWAP3 ADDRESS SSTORE 0xDF RETURNDATASIZE 0xCE 0xBD PUSH15 0xFD4819BBEA5DDA123042C8D6056473 PUSH16 0x6C634300080000330000000000000000 ",
              "sourceMap": "116:173:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;161:126;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;204:14;220:15;255:12;:10;:12::i;:::-;269:10;:8;:10::i;:::-;247:33;;;;161:126;;:::o;752:312:0:-;-1:-1:-1;;1027:14:0;1023:23;1010:37;1006:2;1002:46;;978:80::o;1159:86::-;1228:10;1159:86;:::o;14:327:2:-;198:42;267:15;;;249:34;;319:15;;314:2;299:18;;292:43;176:2;161:18;;143:198::o"
            },
            "methodIdentifiers": {
              "dudududu()": "54955e59"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"dudududu\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"third_party/safe-contracts/contracts/test/TestHandler.sol\":\"TestHandler\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"third_party/safe-contracts/contracts/handler/HandlerContext.sol\":{\"keccak256\":\"0x1e30ae950820820e4c5730533c23102e2edb869d6033f542471e8bf99729df08\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://8edf229566d71b90488fdd3e03dbdef5c37aa4ea59038ed1c12682bf27be9883\",\"dweb:/ipfs/QmY25p3Zv9KF3bs32NDoJ2NgFhZpoXubzAirjXzMVk4B6L\"]},\"third_party/safe-contracts/contracts/test/TestHandler.sol\":{\"keccak256\":\"0xd0d1ab1222aabf7e5b961d780c6dbe0a2787c5eaa5fe424b7aa4da9c3d077767\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://581e8a206bc9c38353ded97aeaf70e439f5e0a088034da2c8705d9d574e721a4\",\"dweb:/ipfs/QmdEvZmpGnZ1sefGr2V1FajAMAxUGAeyqasaTYySTw3bQW\"]}},\"version\":1}"
        }
      }
    },
    "sources": {
      "third_party/safe-contracts/contracts/handler/HandlerContext.sol": {
        "ast": {
          "absolutePath": "third_party/safe-contracts/contracts/handler/HandlerContext.sol",
          "exportedSymbols": {
            "HandlerContext": [
              20
            ]
          },
          "id": 21,
          "license": "LGPL-3.0-only",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                ">=",
                "0.7",
                ".0",
                "<",
                "0.9",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "42:31:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": {
                "id": 2,
                "nodeType": "StructuredDocumentation",
                "src": "75:272:0",
                "text": "@title Handler Context - allows to extract calling context\n @author Richard Meissner - <richard@gnosis.pm>\n @notice based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol"
              },
              "fullyImplemented": true,
              "id": 20,
              "linearizedBaseContracts": [
                20
              ],
              "name": "HandlerContext",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 9,
                    "nodeType": "Block",
                    "src": "813:251:0",
                    "statements": [
                      {
                        "AST": {
                          "nodeType": "YulBlock",
                          "src": "978:80:0",
                          "statements": [
                            {
                              "nodeType": "YulAssignment",
                              "src": "992:56:0",
                              "value": {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1006:2:0",
                                    "type": "",
                                    "value": "96"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [],
                                            "functionName": {
                                              "name": "calldatasize",
                                              "nodeType": "YulIdentifier",
                                              "src": "1027:12:0"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1027:14:0"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1043:2:0",
                                            "type": "",
                                            "value": "20"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "1023:3:0"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1023:23:0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "calldataload",
                                      "nodeType": "YulIdentifier",
                                      "src": "1010:12:0"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1010:37:0"
                                  }
                                ],
                                "functionName": {
                                  "name": "shr",
                                  "nodeType": "YulIdentifier",
                                  "src": "1002:3:0"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1002:46:0"
                              },
                              "variableNames": [
                                {
                                  "name": "sender",
                                  "nodeType": "YulIdentifier",
                                  "src": "992:6:0"
                                }
                              ]
                            }
                          ]
                        },
                        "evmVersion": "istanbul",
                        "externalReferences": [
                          {
                            "declaration": 6,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "992:6:0",
                            "valueSize": 1
                          }
                        ],
                        "id": 8,
                        "nodeType": "InlineAssembly",
                        "src": "969:89:0"
                      }
                    ]
                  },
                  "documentation": {
                    "id": 3,
                    "nodeType": "StructuredDocumentation",
                    "src": "514:233:0",
                    "text": "@notice This is only reliable in combination with a FallbackManager that supports this (e.g. Safe contract >=1.3.0).\n         When using this functionality make sure that the linked _manager (aka msg.sender) supports this."
                  },
                  "id": 10,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_msgSender",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 4,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "771:2:0"
                  },
                  "returnParameters": {
                    "id": 7,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 6,
                        "mutability": "mutable",
                        "name": "sender",
                        "nodeType": "VariableDeclaration",
                        "scope": 10,
                        "src": "797:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 5,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "797:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "796:16:0"
                  },
                  "scope": 20,
                  "src": "752:312:0",
                  "stateMutability": "pure",
                  "virtual": false,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 18,
                    "nodeType": "Block",
                    "src": "1211:34:0",
                    "statements": [
                      {
                        "expression": {
                          "expression": {
                            "id": 15,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "1228:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 16,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "1228:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "functionReturnParameters": 14,
                        "id": 17,
                        "nodeType": "Return",
                        "src": "1221:17:0"
                      }
                    ]
                  },
                  "id": 19,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "_manager",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 11,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1176:2:0"
                  },
                  "returnParameters": {
                    "id": 14,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 13,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 19,
                        "src": "1202:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 12,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1202:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1201:9:0"
                  },
                  "scope": 20,
                  "src": "1159:86:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "internal"
                }
              ],
              "scope": 21,
              "src": "347:900:0"
            }
          ],
          "src": "42:1206:0"
        },
        "id": 0
      },
      "third_party/safe-contracts/contracts/test/TestHandler.sol": {
        "ast": {
          "absolutePath": "third_party/safe-contracts/contracts/test/TestHandler.sol",
          "exportedSymbols": {
            "HandlerContext": [
              20
            ],
            "TestHandler": [
              40
            ]
          },
          "id": 41,
          "license": "LGPL-3.0-only",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 22,
              "literals": [
                "solidity",
                ">=",
                "0.7",
                ".0",
                "<",
                "0.9",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "42:31:1"
            },
            {
              "absolutePath": "third_party/safe-contracts/contracts/handler/HandlerContext.sol",
              "file": "../handler/HandlerContext.sol",
              "id": 23,
              "nodeType": "ImportDirective",
              "scope": 41,
              "sourceUnit": 21,
              "src": "75:39:1",
              "symbolAliases": [],
              "unitAlias": ""
            },
            {
              "abstract": false,
              "baseContracts": [
                {
                  "baseName": {
                    "id": 24,
                    "name": "HandlerContext",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 20,
                    "src": "140:14:1"
                  },
                  "id": 25,
                  "nodeType": "InheritanceSpecifier",
                  "src": "140:14:1"
                }
              ],
              "contractDependencies": [
                20
              ],
              "contractKind": "contract",
              "fullyImplemented": true,
              "id": 40,
              "linearizedBaseContracts": [
                40,
                20
              ],
              "name": "TestHandler",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 38,
                    "nodeType": "Block",
                    "src": "237:50:1",
                    "statements": [
                      {
                        "expression": {
                          "components": [
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 32,
                                "name": "_msgSender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 10,
                                "src": "255:10:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$__$returns$_t_address_$",
                                  "typeString": "function () pure returns (address)"
                                }
                              },
                              "id": 33,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "255:12:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 34,
                                "name": "_manager",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 19,
                                "src": "269:8:1",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 35,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "269:10:1",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "id": 36,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "254:26:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_address_$_t_address_$",
                            "typeString": "tuple(address,address)"
                          }
                        },
                        "functionReturnParameters": 31,
                        "id": 37,
                        "nodeType": "Return",
                        "src": "247:33:1"
                      }
                    ]
                  },
                  "functionSelector": "54955e59",
                  "id": 39,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "dudududu",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 26,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "178:2:1"
                  },
                  "returnParameters": {
                    "id": 31,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 28,
                        "mutability": "mutable",
                        "name": "sender",
                        "nodeType": "VariableDeclaration",
                        "scope": 39,
                        "src": "204:14:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 27,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "204:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 30,
                        "mutability": "mutable",
                        "name": "manager",
                        "nodeType": "VariableDeclaration",
                        "scope": 39,
                        "src": "220:15:1",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 29,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "220:7:1",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "203:33:1"
                  },
                  "scope": 40,
                  "src": "161:126:1",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 41,
              "src": "116:173:1"
            }
          ],
          "src": "42:248:1"
        },
        "id": 1
      }
    }
  }
}
